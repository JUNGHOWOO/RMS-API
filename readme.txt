*프로젝트 개요
: 기존 사내 통합 관리시스템(CMS)에는 외부에서의 요청을 등록하고 관리할 수 있는 API가 
존재하지 않아 요청은 메신저로 수신 받고 해당 데이터는 액셀 파일 데이터로 별도 관리하고 
있었는데 이러한 불편함을 개선하고자 요청 관리 시스템 서버(RMS)를 개발하여 요청 데이터를 
별도의 DB와 서버에서 관리

* 개발 언어
CMS - 주요언어: JAVA
RMS - javascript, node.js, express, mysql

* rms api server
1. CMS 서버의 API로 기능하는 서버, 메인 화면에 보이는 요청 관리 배너 메뉴는 CMS에서 JAVA로 구현
2. 두 서버 간의 연동은 CMS의 requestController.java 파일이 담당

* db
1. mysql에서 생성
2. 요청 데이터 DB인 request DB, 파일 데이터 DB인 request_attachfile DB

*app.js
1. v1(최초 프로젝트), v2(보완 프로젝트) 모두 app.js의 라우팅 하에 구동
2. 라이브러리, 에러 핸들러, 포트 등 선언

* v1
1. rms 서버 api를 위한 최초 코드: v1
2. v1 rms.js는 db.js와 연동되어 있음
3. 파일 첨부 없이 요청 등록 시 요청 DB에만 등록, 콘솔창 출력
4. 파일 첨부 후 요청 등록 시 파일 DB에도 등록, 콘솔창 출력(복수 파일 가능)
5. DB 작업 완료 시 CMS 서버에 json 응답 반환
6. APIKEY값 검색 로직은 미완성
7, 보완점: 에러처리, 동기처리(트랜잭션), 암복호화, APIKEY 검색

* v2 프로젝트------ 코드 보완
* config
1. 최초 프로젝트 가동 시 node app.js --profile dev 혹은 oper 로 서버 시작
2. argument 입력 받는 로직은 app.js에 선언
3. argu 값에 따른 ip, 포트, 파일저장 베이스 폴더의 구분
 -> 관리자-사용자 등의 구분을 위하여

* v2
1. v2는 rms.js는 db 파일을 별도로 두지 않음
2. 파일 첨부 없이 요청 등록 시 요청 DB에만 등록, 콘솔창 출력, json 응답
3. 파일 첨부 후 요청 등록 시 파일 DB에도 등록, 콘솔창 출력, json 응답
4. 트랜잭션처리로 파일DB 작업 중 에러 발생 시, 전체 롤백(데이터가 DB에 업데이트 되지 않음)
5. 에러처리가 되어있어 에러 시에도 json 응답
6. 암복호화 작업 완료
7. APIKEY값 검색 로직 완성: 커넥션, 에러처리, json 응답: 홈페이지에 실제 구현은 X



