// ------- * rms rest API 수신과 응답을 담당하며 컨트롤러 역할을 하는 rms.js

// promise 동기 처리 시도하다가 실패한 코드

// 0. 변수 및 라이브러리 선언 ================================================
var express = require('express');
var router = express.Router();
var async = require('async');
const db = require('./../db');
const fs = require('fs');
const { type } = require('os');
const { count } = require('console');
const { callbackify } = require('util');
const { resolve } = require('path');
let resetFs = "\x1b[0m"; // 콘솔창 글씨 디자인 초기화

// 1. 요청 내역 및 첨부파일 DB 업데이트 로직 ==================================
// * console 출력 및 DB 업로드 라우터--------------------------------------
router.post('/createrequest', (req, res, next) => {

  const myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
      var files = req.body.fileArray;
      if (files.length == 0) {
        f1();
      } else {
        f2();
      }
    }, 1000);
  });

  const f1 = async () =>  {
    db.regReq(req, async (result) => {
      // request_attachfile DB 업데이트 정보 콘솔창 출력------------------
      console.log("\x1b[33m", '>> request DB: RequestInfo');
      console.log("\x1b[36m", "APIKEY : " + req.header('BJRMS-APIKEY'));
      console.log(resetFs, "UserName : " + req.body.regUserName);
      console.log(resetFs, "UserPhone : " + req.body.regUserPhone);
      console.log(resetFs, "Subject : " + req.body.requestSubject);
      console.log(resetFs, "Contents : " + req.body.requestContents);
      console.log(resetFs, "");
      console.log("\x1b[33m", ">> request_attachfile DB: NumOfFiles: 0");
      console.log("\x1b[31m", "DEBUG - feed: message: No attachments found", resetFs);
      console.log('\u001b[41m', "-------Message end------", resetFs);
      res.json({ isSuccess: "2", msg: "요청내역을 저장하였으나 첨부파일이 존재하지 않습니다." });
    });
  }

  const f3 = async () => {
      console.log("f3");
  }

  const f2 = async () => {
    db.regReq(req, async (result) => {
      // request_attachfile DB 업데이트 정보 콘솔창 출력------------------
      console.log("\x1b[33m", '>> request DB: RequestInfo');
      console.log("\x1b[36m", "APIKEY : " + req.header('BJRMS-APIKEY'));
      console.log(resetFs, "UserName : " + req.body.regUserName);
      console.log(resetFs, "UserPhone : " + req.body.regUserPhone);
      console.log(resetFs, "Subject : " + req.body.requestSubject);
      console.log(resetFs, "Contents : " + req.body.requestContents);
      let requestSeq = 0;
      var files = req.body.fileArray;
      requestSeq = result.insertId;
      console.log(resetFs, "");
      console.log("\x1b[33m", ">> request_attachfile DB: NumOfFiles: " + files.length, resetFs);
      for (var i = 0; i < files.length; i++) {
        console.log("\x1b[36m", "requestSeq : " + requestSeq);
        console.log(resetFs, "oriFilename : " + files[i].oriFilename);
        console.log(resetFs, "fileData : " + files[i].fileData);
        console.log(resetFs, "savaFilename : " + files[i].saveFilename);
        console.log(resetFs, "filesize : " + files[i].filesize + "Byte");
        let uploadFile = files[i]; // regFile 내에서 쓰이는 변수
        db.regFile(req, res, requestSeq, uploadFile, function () {
          // uploads 폴더에 첨부파일 업로드 로직 ------------------------
          let userUploadedImagePath = "C:\\Users\\이종하\\Desktop\\bjworld21_rms\\uploads\\" + uploadFile.saveFilename;
          fs.writeFile(userUploadedImagePath, uploadFile.fileData, function () {
            console.log(resetFs, "filepath : " + userUploadedImagePath);
            console.dir('DEBUG - feed: message: Saved to disk image attached by user');
            console.log('\u001b[41m', "-------Message end-------", resetFs);
            res.json({ isSuccess: "1", msg: "요청 내역과 첨부파일을 저장하였습니다." });
          });
        });
      }
    });
  }

  const f4 = async () => {
      console.log("f4");
  }

  async function f0() {
    await Promise.all([f1(), f2(), f3(), f4()]);
    f1().then(
      f3()
    )
    f2().then(
      f4()
    )
    .catch((err) => {
      console.log('\u001b[45m', '----Error detected !----', resetFs, "");
      console.error(err);
      //res.json({ isSuccess: "0", msg: "요청 내역을 저장에 실패하였습니다." });
    })

    .finally(() => {
      console.log('\u001b[41m', "-------Message end------", resetFs);
      if (files.length == 0) { // 첨부 파일이 없는 경우
        res.json({ isSuccess: "2", msg: "요청내역을 저장하였으나 첨부파일이 존재하지 않습니다." });
      } else { // 첨부 파일이 있는 경우
        res.json({ isSuccess: "1", msg: "요청 내역과 첨부파일을 저장하였습니다." });
      }
    });
  }

  f0;


/* 
  myPromise
    .then(n => {
      console.log(n);
      if (files.length == 0) { // 첨부 파일이 없는 경우
        console.log('\u001b[45m', '------Message Start------', resetFs, "");
        console.log("\x1b[33m", '>> request DB: RequestInfo');
        console.log("\x1b[36m", "APIKEY : " + req.header('BJRMS-APIKEY'));
        console.log(resetFs, "UserName : " + req.body.regUserName);
        console.log(resetFs, "UserPhone : " + req.body.regUserPhone);
        console.log(resetFs, "Subject : " + req.body.requestSubject);
        console.log(resetFs, "Contents : " + req.body.requestContents);
        console.log(resetFs, "");
        console.log("\x1b[33m", ">> request_attachfile DB: NumOfFiles: " + files.length, resetFs);
        console.log("\x1b[31m", "DEBUG - feed: message: No attachments found", resetFs);
      } else {
        console.log('\u001b[45m', '------Message Start------', resetFs, "");
        console.log("\x1b[33m", '>> request DB: RequestInfo');
        console.log("\x1b[36m", "APIKEY : " + req.header('BJRMS-APIKEY'));
        console.log(resetFs, "UserName : " + req.body.regUserName);
        console.log(resetFs, "UserPhone : " + req.body.regUserPhone);
        console.log(resetFs, "Subject : " + req.body.requestSubject);
        console.log(resetFs, "Contents : " + req.body.requestContents);
        console.log(resetFs, "");
        console.log("\x1b[33m", ">> request_attachfile DB: NumOfFiles: " + files.length, resetFs);
        for (var i = 0; i < files.length; i++) {
          console.log("\x1b[36m", "requestSeq : " + requestSeq);
          console.log(resetFs, "oriFilename : " + files[i].oriFilename);
          console.log(resetFs, "fileData : " + files[i].fileData);
          console.log(resetFs, "savaFilename : " + files[i].saveFilename);
          // uploads 폴더에 첨부파일 업로드 로직 ------------------------
          console.log(resetFs, "filepath : " + userUploadedImagePath);
          console.dir('DEBUG - feed: message: Saved to disk image attached by user');
        }
      }
      // request DB 업데이트 정보 콘솔창 출력------------------------------

    })

    .catch((err) => {
      console.log('\u001b[45m', '----Error detected !----', resetFs, "");
      console.error(err);
      //res.json({ isSuccess: "0", msg: "요청 내역을 저장에 실패하였습니다." });
    })

    .finally(() => {
      console.log('\u001b[41m', "-------Message end------", resetFs);
      if (files.length == 0) { // 첨부 파일이 없는 경우
        res.json({ isSuccess: "2", msg: "요청내역을 저장하였으나 첨부파일이 존재하지 않습니다." });
      } else { // 첨부 파일이 있는 경우
        res.json({ isSuccess: "1", msg: "요청 내역과 첨부파일을 저장하였습니다." });
      }
    });
 */

});

// * 2. APIKEY 값을 통한 DB 검색 로직 =========================================
router.get('/getrequestcompanylist', function (req, res, next) {
  console.log('\u001b[45m', '------Search Start------', resetFs, "");
  console.log("APIKEY VALUE : " + req.header('BJRMS-APIKEY'));
  db.apiSearch(req, (result) => {
    res.json({ isSuccess: "1", msg: "검색에 성공하였습니다." });
    console.log(resetFs, "searchResult : " + result, resetFs);
    console.log('\u001b[41m', "-------Search end-------");
  });
});

// 99. 라우터 모듈 선언 =======================================================
module.exports = router;